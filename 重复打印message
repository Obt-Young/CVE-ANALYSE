1：使用以下模块注入故障： 
vi zl_module.c 

#include <linux/module.h> 
#include <linux/kernel.h> 
#include <linux/sched.h>        // find_vpid(), get_pid_task(), task_thread_info(), get_task_struct(), put_task_struct() 
#include <linux/kallsyms.h>     // kallsyms_lookup_name() 

MODULE_LICENSE("GPL"); 


struct task_struct *get_swapper_task(int cpu) 
{ 
        unsigned long idle_threads_ptr; 
        struct task_struct **pp_swapper_task; 

        /* 
         * See idle_thread_get() 
         */ 
        idle_threads_ptr = kallsyms_lookup_name("idle_threads"); 
        printk(KERN_EMERG "idle_threads addr: %p\n", (void *)idle_threads_ptr); 
        if (!idle_threads_ptr) 
          return NULL; 

        pp_swapper_task = (struct task_struct **)((unsigned long)per_cpu_offset(cpu) + idle_threads_ptr); 
        printk(KERN_EMERG "swapper_task percpu pointer = %p\n", pp_swapper_task); 
        if (!pp_swapper_task) 
          return NULL; 
        printk(KERN_EMERG "swapper_task=%p wake_cpu=%d comm=%s\n", *pp_swapper_task, (*pp_swapper_task)->wake_cpu, (*pp_swapper_task)->comm); 
        if ((*pp_swapper_task)->wake_cpu != cpu) 
          return NULL; 

        get_task_struct(*pp_swapper_task); 

        return *pp_swapper_task; 
} 

int init_module(void) 
{ 
        struct task_struct *target_task; 
        struct thread_info *target_thread_info; 

        printk(KERN_EMERG "Begin\n"); 

        target_task = get_swapper_task(0); 
        if (!target_task) return -1; 

        target_thread_info = task_thread_info(target_task); 
        printk(KERN_EMERG "thread_info = %p\n", target_thread_info); 

        target_thread_info->preempt_count++; 

        put_task_struct(target_task); 

        return -1; 
} 

vi Makefile 
obj-m += zl_module.o 
all: 
        make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules 
clean: 
        make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean 

注：使用insmod加载模块后即可注入故障，模块会报告加载失败，这是正常现象，这时候故障已注入，重启系统后可恢复。 

2：通过dmesg确认报警输出，确认点： 
a. 存在本DTS中的告警 
b. 只输出1次 

3：重启系统，修改模块中get_swapper_task(0)的参数到其他CPU，比如1，2等，重复上述测试，预期相同。 

4：重启系统，修改模块中target_thread_info->preempt_count++到其他数值，如target_thread_info->preempt_count+=10，重复上述测试，预期相同。 
